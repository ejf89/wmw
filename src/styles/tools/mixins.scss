/**
 * Sets a media query for the specified breakpoint
 *
 * Accepts:
 * - $media-query: {String} Breakpoint variable (list found in variables.scss)
 *
 * Usage:
 * .selector {
 *   @include media-query($medium-up) {
 *     color: red;
 *   }
 * }
 */
@mixin media-query($media-query) {
  $breakpoint-found: false;

  @each $breakpoint in $breakpoints {
    $name: nth($breakpoint, 1);
    $declaration: nth($breakpoint, 2);

    @if $media-query == $name and $declaration {
      $breakpoint-found: true;

      @media only screen and #{$declaration} {
        @content;
      }
    }
  }
}

/**
 * Outputs list of transition properties
 *
 * Accepts:
 * - $transitions: {String} List of transition properties to set
 *
 * Usage:
 * .selector {
 *   @include transition(width, height 0.5s ease-in);
 * }
 */
// @mixin transition($transitions...) {
//   $output: ();
//
//   @each $transition in $transitions {
//     $output: append($output, get-transition-properties($transition), comma);
//   }
//   transition: $output;
// }


//  _______ _____            _   _  _____ _____ _______ _____ ____  _   _
// |__   __|  __ \     /\   | \ | |/ ____|_   _|__   __|_   _/ __ \| \ | |
//    | |  | |__) |   /  \  |  \| | (___   | |    | |    | || |  | |  \| |
//    | |  |  _  /   / /\ \ | . ` |\___ \  | |    | |    | || |  | | . ` |
//    | |  | | \ \  / ____ \| |\  |____) |_| |_   | |   _| || |__| | |\  |
//    |_|  |_|  \_\/_/    \_\_| \_|_____/|_____|  |_|  |_____\____/|_| \_|

@mixin transition($transitions...) {
  $unfoldedTransitions: ();
  @each $transition in $transitions {
    $unfoldedTransitions: append($unfoldedTransitions, unfoldTransition($transition), comma);
  }

  -webkit-transition: $unfoldedTransitions;
  transition: $unfoldedTransitions;
}

@function unfoldTransition ($transition) {
  // Default values
  $property: all;
  $duration: 400ms;
  $easing: ease-in-out; // Browser default is ease, which is what we want
  $delay: 0s; // Browser default is 0, which is what we want
  $defaultProperties: ($property, $duration, $easing, $delay);

  // Grab transition properties if they exist
  $unfoldedTransition: ();
  @for $i from 1 through length($defaultProperties) {
    $p: null;
    @if $i <= length($transition) {
      $p: nth($transition, $i)
    } @else {
      $p: nth($defaultProperties, $i)
    }
    $unfoldedTransition: append($unfoldedTransition, $p);
  }

  @return $unfoldedTransition;
}

/**
 * Forces an element to self-clear its children
 *
 * Usage:
 * .selector {
 *   @include clearfix;
 * }
 */
@mixin clearfix() {
  &::after {
    content: '';
    display: table;
    clear: both;
  }

  // stylelint-disable-next-line
  *zoom: 1;
}

/**
 * Hide element but make it accessible to screen readers
 *
 * Usage:
 * .selector {
 *   @include visually-hidden;
 * }
 */
@mixin visually-hidden() {
  // stylelint-disable-next-line
  position: absolute !important;
  overflow: hidden;
  width: 1px;
  height: 1px;
  margin: -1px;
  padding: 0;
  border: 0;
  clip: rect(0 0 0 0);
}

/**
 * Reverse the properties applied by @mixin visually-hidden
 *
 * Accepts:
 * - $position: {String} Positioning method for element
 *
 * Usage:
 * .selector {
 *   @include visually-shown(relative);
 * }
 */
@mixin visually-shown($position: inherit) {
  // stylelint-disable-next-line
  position: $position !important;
  overflow: auto;
  width: auto;
  height: auto;
  margin: 0;
  clip: auto;
}



$gutter: 10px;
$grid-gap: 10px;

/*================ Basic Grid Mixin ================*/
@mixin grid{
  display: grid;
  grid-auto-rows: auto 1fr;
  grid-column-gap: $grid-gap;
  grid-row-gap: $grid-gap;
  grid-auto-rows: 1fr;
  justify-content: center;
  align-content: center;
  justify-items: center;
}

.grid-left{justify-content: left !important; align-content: left !important; justify-items: left !important;}
.grid-right{justify-content: right !important;align-content: right !important;justify-items: right !important;}

/*================ Standard Grids ================*/
.grid-2  { @include grid; grid-template-columns: repeat(2, 1fr);}
.grid-3  { @include grid; grid-template-columns: repeat(3, 1fr);}
.grid-4  { @include grid; grid-template-columns: repeat(4, 1fr);}
.grid-5  { @include grid; grid-template-columns: repeat(5, 1fr);}
.grid-6  { @include grid; grid-template-columns: repeat(6, 1fr);}
.grid-7  { @include grid; grid-template-columns: repeat(7, 1fr);}
.grid-8  { @include grid; grid-template-columns: repeat(8, 1fr);}
.grid-9  { @include grid; grid-template-columns: repeat(9, 1fr);}
.grid-10 { @include grid; grid-template-columns: repeat(10, 1fr);}

@include media-query($small){
  .grid-3, .grid-4,
  .grid-5, .grid-6,
  .grid-7, .grid-8,
  .grid-9, .grid-10,
  .grid-2-1, .grid-2-break-1{
    @include grid; grid-template-columns: repeat(1, 1fr) !important;
  }
};
